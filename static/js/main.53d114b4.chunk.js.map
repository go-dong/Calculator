{"version":3,"sources":["logo.svg","actions.js","defaults.js","reducer.js","serviceWorker.js","timeset.js","control.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","gapTime","gap","type","value","addGap","countTime","timeGap","resetTime","time","curTime","defaultTime","initialState","currentGap","currentTime","timeChangeReducer","state","arguments","length","undefined","Defaults","action","Object","objectSpread","Boolean","window","location","hostname","match","Timeset","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startTimeLevel","gapPlusClick","bind","assertThisInitialized","gapMinusClick","timePlusClick","timeMinusClick","store","dispatch","Actions","gapLevel","getState","react_default","a","createElement","className","toHHMMSS","onClick","Component","Control","status","reset","countGap","startCount","pauseCount","resetCount","ms","ts1","ts2","Date","getTime","_this2","setState","timer","setInterval","console","log","sleep","clearInterval","id","App","handleClick","myNum","parseInt","hours","Math","floor","minutes","seconds","src","logo","alt","src_timeset","control","Container","connect","createStore","Reducer","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53d114b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const STOP = \"STOP\";\nexport const COUNT = \"COUNT\";\nexport const GAP = \"GAP\"\nexport const TIME = \"TIME\";\n\nexport const gapTime = (gap) => {\n  return {\n    type: STOP ,\n    value: GAP,\n    addGap: gap\n  }\n}\n\nexport const countTime = (gap) => {\n  return {\n    type: STOP,\n    value: TIME,\n    timeGap: gap\n  }\n}\n\nexport const resetTime = (time) => {\n  return {\n    type: COUNT,\n    curTime: time\n  }\n}\n","import * as Actions from './actions';\n\nexport const defaultTime = [15, 86400];\n\nexport const initialState = {\n  type: Actions.STOP,\n  currentGap: defaultTime[0],\n  currentTime: defaultTime[1]\n}\n","import * as Actions from './actions';\nimport * as Defaults from './defaults';\n\nconst timeChangeReducer = (state = Defaults.initialState, action) => {\n  switch (action.type) {\n    case Actions.STOP:\n      if(action.value === Actions.GAP) {\n        return {...state,\n          currentGap: (state.currentGap + action.addGap) < 0 ? 0 : state.currentGap + action.addGap\n        };\n      } else if(action.value === Actions.TIME) {\n        return {...state,\n          currentTime: ((state.currentTime + action.timeGap) > 86400) ? 0 + ((state.currentTime + action.timeGap) - 86400) : ((state.currentTime + action.timeGap) < 0 ? (86400 + (state.currentTime + action.timeGap)) : (state.currentTime + action.timeGap))\n        };\n      } return state;\n    case Actions.COUNT: return {...state, currentTime: action.curTime};\n    default: return state;\n  }\n}\n\nexport default timeChangeReducer;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './timeset.css';\nimport * as Actions from './actions';\n\n\nclass Timeset extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTimeLevel: 1\n    }\n    this.gapPlusClick = this.gapPlusClick.bind(this);\n    this.gapMinusClick = this.gapMinusClick.bind(this);\n    this.timePlusClick = this.timePlusClick.bind(this);\n    this.timeMinusClick = this.timeMinusClick.bind(this);\n  }\n\n  gapPlusClick() {\n    this.props.store.dispatch(Actions.gapTime(this.props.gapLevel));\n  }\n  gapMinusClick() {\n    this.props.store.dispatch(Actions.gapTime(-this.props.gapLevel));\n  }\n  timePlusClick() {\n    this.props.store.dispatch(Actions.countTime(this.props.store.getState().currentGap));\n  }\n  timeMinusClick() {\n    this.props.store.dispatch(Actions.countTime(-this.props.store.getState().currentGap));\n  }\n  render() {\n    return (\n      <div className=\"times-section\">\n        <div className=\"break-time\">\n          <p className=\"time-label\">Break Length</p>\n          <p className=\"time-value\">{this.props.toHHMMSS(this.props.store.getState().currentGap)}</p>\n          <button className=\"break-up\" onClick={this.gapPlusClick}>+</button>\n          <button className=\"break-down\" onClick={this.gapMinusClick}>-</button>\n        </div>\n        <div className=\"start-time\">\n          <p className=\"time-label\">Session Length</p>\n          <p className=\"time-value\">{this.props.toHHMMSS(this.props.store.getState().currentTime)}</p>\n          <button className=\"start-up\" onClick={this.timePlusClick}>+</button>\n          <button className=\"start-down\" onClick={this.timeMinusClick}>-</button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default Timeset;\n","import React, { Component } from 'react';\nimport * as Actions from './actions';\n//import * as Defaults from './defaults';\n\nclass Control extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"Stop\",\n      reset: false,\n      countGap: this.props.store.getState().currentGap,\n      curTime: '',\n      resetTime: ''\n    }\n    this.startCount = this.startCount.bind(this);\n    this.pauseCount = this.pauseCount.bind(this);\n    this.resetCount = this.resetCount.bind(this);\n  }\n  sleep(ms){\n    let ts1, ts2;\n    ts1 = new Date().getTime() + ms;\n    do ts2 = new Date().getTime(); while (ts2<ts1);\n  }\n  startCount() {\n    if(!this.state.reset) {\n      this.setState({\n        resetTime: this.props.store.getState().currentTime\n      });\n    }\n    this.setState({\n      status: \"Running\",\n      reset: true,\n      curTime: this.props.store.getState().currentTime\n    });\n\n    this.timer = setInterval(() => {\n      if(this.state.curTime > 0) {\n        if(!this.state.reset) {\n          this.setState({\n            reset: true,\n            curTime: this.state.curTime\n          });\n        }\n        else {\n          if(this.state.curTime === 1) {\n            this.setState({\n              status: \"Break\"\n            });\n          }\n          this.setState({\n            curTime: this.state.curTime - 1\n          });\n        }\n        console.log(\"curTime:, \", this.props.toHHMMSS(this.state.curTime));\n      }\n      else {\n        this.sleep(this.state.countGap * 1000);\n        this.setState({\n          status: \"Running\",\n          reset: false,\n          curTime: this.props.store.getState().currentTime\n        });\n        this.props.store.dispatch(Actions.resetTime(this.state.curTime + 1));\n      }\n    }, 1000);\n  }\n  pauseCount() {\n    if(!this.state.reset) {\n      this.setState({\n        resetTime: this.props.store.getState().currentTime\n      });\n    }\n    this.setState({\n      reset: true\n    });\n    if(this.timer) {\n      clearInterval(this.timer);\n    }\n    this.props.store.dispatch(Actions.resetTime(this.state.curTime));\n  }\n  resetCount() {\n    if(this.timer) {\n      clearInterval(this.timer);\n      this.setState({\n        reset: false,\n        curTime: this.state.resetTime\n      });\n    }\n    this.timer = null;\n    this.props.store.dispatch(Actions.resetTime(this.state.resetTime));\n  }\n  render() {\n    return (\n      <div className=\"control-section\">\n        <div className=\"timer-control\">\n          <div><strong>{this.state.status}</strong></div>\n          <div>{!this.timer && this.props.toHHMMSS(this.props.store.getState().currentTime)}</div>\n          <div>{this.timer && this.props.toHHMMSS(this.state.curTime)}</div>\n          <button id=\"start_count\" onClick={this.startCount}>▶</button>\n          <button id=\"start_stop\" onClick={this.pauseCount}>Ⅱ</button>\n          <button id=\"reset\" onClick={this.resetCount}>■</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Control;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport * as Actions from './actions';\nimport Timeset from './timeset';\nimport Control from './control';\nimport {connect} from 'react-redux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gapLevel: 15\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.props.store.dispatch(Actions.gapTime(this.state.gapLevel));\n  }\n  toHHMMSS(time) {\n      const myNum = parseInt(time, 10);\n      let hours   = Math.floor(myNum / 3600);\n      let minutes = Math.floor((myNum - (hours * 3600)) / 60);\n      let seconds = myNum - (hours * 3600) - (minutes * 60);\n\n      if (hours   < 10) {hours   = \"0\"+hours;}\n      if (minutes < 10) {minutes = \"0\"+minutes;}\n      if (seconds < 10) {seconds = \"0\"+seconds;}\n      return hours+':'+minutes+':'+seconds;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-div\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <Timeset className=\"timeset\" store={this.props.store} gapLevel={this.state.gapLevel} toHHMMSS={this.toHHMMSS}/>\n          <Control store={this.props.store} toHHMMSS={this.toHHMMSS}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentGap: state.currentGap,\n    currentTime: state.currentTime\n  }\n}\n\nconst Container = connect(mapStateToProps)(App);\n\nexport default Container;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport Reducer from './reducer';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport Container from './App';\n\nconst store = createStore(Reducer);\n\nReactDOM.render(\n    <Container store={store} />\n  , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}