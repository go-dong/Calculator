{"ast":null,"code":"/**\n * Create an accurate interval that does not skew over time.\n * @param  {function}   func            Function to call ever interval ms\n * @param  {number}     interval        Interval (in ms) with which to call func\n * @param  {Object}     opts            Interval (in ms) with which to call func\n * @param  {boolean}    opts.aligned    Align timestamps\n * @param  {boolean}    opts.immediate  Call func immediately as well\n * @return {Object}                     Object with clear method\n */\nmodule.exports = function accurateInterval(func, interval, opts) {\n  if (!opts) opts = {};\n  var clear, nextAt, timeout, wrapper, now;\n  now = new Date().getTime();\n  nextAt = now;\n\n  if (opts.aligned) {\n    nextAt += interval - now % interval;\n  }\n\n  if (!opts.immediate) {\n    nextAt += interval;\n  }\n\n  timeout = null;\n\n  wrapper = function wrapper() {\n    var scheduledTime = nextAt;\n    nextAt += interval;\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n    func(scheduledTime);\n  };\n\n  clear = function clear() {\n    return clearTimeout(timeout);\n  };\n\n  timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n  return {\n    clear: clear\n  };\n};","map":null,"metadata":{},"sourceType":"script"}